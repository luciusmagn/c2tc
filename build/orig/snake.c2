module snake;

import stdio as io;
import string local;

#define ANSI_BLACK    "\033[0;30m"
#define ANSI_RED      "\033[0;31m"
#define ANSI_GREEN    "\033[0;32m"
#define ANSI_YELLOW   "\033[0;33m"
#define ANSI_BLUE     "\033[0;34m"
#define ANSI_MAGENTA  "\033[0;35m"
#define ANSI_CYAN     "\033[0;36m"
#define ANSI_GREY     "\033[0;37m"
#define ANSI_DARKGREY "\033[01;30m"
#define ANSI_BRED     "\033[01;31m"
#define ANSI_BGREEN   "\033[01;32m"
#define ANSI_BYELLOW  "\033[01;33m"
#define ANSI_BBLUE    "\033[01;34m"
#define ANSI_BMAGENTA "\033[01;35m"
#define ANSI_BCYAN    "\033[01;36m"
#define ANSI_WHITE    "\033[01;37m"
#define ANSI_NORMAL   "\033[0m"

type Coor struct {
    int8 x;
    int8 y;
    uint8 flags;
}

type Piece struct {
    Coor[4] side1;
    Coor[4] side2;
}

type FieldStatus enum int8 {
    FIELD_FREE = 0,
    FIELD_BLOCKED,
    FIELD_TAKEN,    // + index of piece
}

type Field struct {
#if 0
    FieldStatus status : 2;
    uint32 piece_id : 4;
    uint32 flags : 3;
    uint32 expected : 3;  // set by other pieces
#endif
    FieldStatus status;
    uint8 piece_id;
    uint8 flags;
    uint8 expected;  // set by other pieces
}

type Flags enum int8 {
    NORTH = 1,
    EAST  = 2,
    SOUTH = 3,
    WEST  = 4,
    HEAD  = 5,
    TAIL  = 6,
}

type Board struct {
    Field[5*5] fields;
    bool haveHead;
    bool haveTail;
}

type Option struct {
    Coor[4] parts;
}

Board board;

Piece[] pieces = {
    { // Hollow piece
        .side1 = { { 0, 0, 0 } },
        .side2 = { { 0, 0, 0 } },
    },
    { // S-shaped
        .side1 = { { 0, 0, 0 }, { 0, 1, NORTH }, { 1, 1, SOUTH }, { 1, 2, 0 } },
        .side2 = { { 0, 0, 0 }, { 1, 0, 0 }, { 1, 1, WEST }, { 2, 1, SOUTH } },
    },
    { // L-shaped
        .side1 = { { 0, 0, 0 }, { 0, 1 , 0 }, { 0, 2, NORTH }, { 1, 0, EAST } },
        .side2 = { { 0, 0, 0 }, { 1, 0 , 0 }, { 1, 1, 0 }, { 1, 2, 0 } }
    },
    { // L-shaped, head
        .side1 = { { 0, 0, 0 }, { 0, 1, 0 }, { 0, 2, 0 }, { 1, 0, 0 } },
        .side2 = { { 0, 0, NORTH }, { 1, 0 , 0 }, { 1, 1, 0 }, { 1, 2, HEAD } }
    },
    { // 3 1-side empty
        .side1 = { { 0, 0, 0 }, { 0, 1, 0 }, { 1, 0, 0 } },
        .side2 = { { 0, 0, 0 }, { 0, 1, EAST }, { 1, 0, EAST } },
    },
    { // 3 2-tails
        .side1 = { { 0, 0, WEST }, { 0, 1, TAIL }, { 1, 0, 0 } },
        .side2 = { { 0, 0, SOUTH }, { 0, 1, 0 }, { 1, 0, TAIL } },
    },
    { // I-shaped, 3-straight
        .side1 = { { 0, 0, SOUTH }, { 0, 1, 0 }, { 0, 2, HEAD } },
        .side2 = { { 0, 0, SOUTH }, { 0, 1, 0 }, { 0, 2, WEST } },
    },
    { // I-shaped, 2 long
        .side1 = { { 0, 0, WEST }, { 0, 1, NORTH } },
        .side2 = { { 0, 0, 0 }, { 0, 1, 0 } },
    },
}
Option[NumOptions][NumPieces] options;
const int32 NumPieces = elemsof(pieces);
const int32 NumOptions = 8;

type PositionType enum int8 {
    PLACE_FREE = 0, // not placed yet
    PLACE_SETUP,    // placed by initial setup
    PLACE_PLACED,   // placed during search
}

type Position struct {
    PositionType postype;
    int8 option;
    int8 x;
    int8 y;
}

const Position[] Setup = {
    [0] = { PLACE_SETUP, 0, 1, 4 },
}


func Coor coor_rotate(Coor input, uint32 rotation) {
    int8 x = input.x;
    int8 y = input.y;
    int8 t;
    switch (rotation) {
    case 0: // nothing to do
        break;
    case 1: // 90 degrees right
        t = x;
        x = y;
        y = -t;
        break;
    case 2: // 180 degrees right
        x = -x;
        y = -y;
        break;
    case 3: // 270 degrees right
        t = x;
        x = -y;
        y = t;
        break;
    }
    uint8 flags = input.flags;  // keep HEAD/TAIL, rotate NESW
    if (rotation > 0 && flags >= NORTH && flags <= WEST) {
        flags += rotation;
        if (flags > 4) flags -= 4;
    }

    Coor result = { x, y, flags }
    return result;
}

// calculate all rotations + flipped rotations
func void calculate_rotations() {
    memset(options, 0, sizeof(options));
    for (uint32 p=0; p<NumPieces; p++) {
        const Piece* pp = &pieces[p];
        for (uint32 o=0; o<4; o++) {  // 4 rotations
            Option* o1 = &options[o][p];
            for (uint32 i=0; i<4; i++) {  // side1
                Coor c = pp.side1[i];
                if (i != 0 && c.x == 0 && c.y == 0) break;
                o1.parts[i] = coor_rotate(c, o);
            }
            Option* o2 = &options[o+4][p];
            for (uint32 i=0; i<4; i++) {  // side2
                Coor c = pp.side2[i];
                if (i != 0 && c.x == 0 && c.y == 0) break;
                o2.parts[i] = coor_rotate(c, o);
            }
        }
    }
}

func void board_set(int32 x, int32 y, Field field) {
    board.fields[x + y * 5] = field;
}

func Field board_get(int32 x, int32 y) {
    return board.fields[x + y * 5];
}

func void board_clearflags(int32 x, int32 y) {
    board.fields[x + y * 5].expected = 0;
}

func void board_setExpected(int32 x, int32 y, uint8 side) {
    board.fields[x + y * 5].expected = side;
}

func void board_init() {
    Field f;
    f.status = FIELD_FREE;
    f.piece_id = 0;
    f.flags = 0;
    f.expected = 0;
    for (int32 y=0; y<5; y++) {
        for (int32 x=0; x<5; x++) {
            board_set(x, y, f);
        }
    }
    f.status = FIELD_BLOCKED;
    board_set(0, 4, f);
    board.haveHead = 0;
    board.haveTail = 0;
}

func char flags2char(int32 flags) {
    char f = ' ';
    switch (flags) {
    case NORTH:
        f = 'N';
        break;
    case EAST:
        f = 'E';
        break;
    case SOUTH:
        f = 'S';
        break;
    case WEST:
        f = 'W';
        break;
    case HEAD:
        f = 'H';
        break;
    case TAIL:
        f = 'T';
        break;
    }
    return f;
}

func void board_print() {
    char[1024] buffer;
    memset(buffer, 0, sizeof(buffer));
    char* cp = buffer;
    cp += io.sprintf(cp, "Board: Head=%d  Tail=%d\n", board.haveHead, board.haveTail);
    for (int32 y=4; y>=0; y--) {
        cp += io.sprintf(cp, "---------------------\n");
        for (int32 x=0; x<5; x++) {
            *cp++ = '|';
            Field field = board.fields[x + y * 5];
            switch (field.status) {
            case FIELD_FREE:
                if (field.expected) {
                    cp += io.sprintf(cp, ANSI_RED"%c"ANSI_NORMAL, flags2char(field.expected));
                } else {
                    *cp++ = ' ';
                }
                *cp++ = ' ';
                *cp++ = ' ';
                break;
            case FIELD_BLOCKED:
                cp += io.sprintf(cp, ANSI_DARKGREY"XXX"ANSI_NORMAL);
                break;
            default:
            {
                int32 flags = field.flags;
                if (field.expected) {
                    cp += io.sprintf(cp, ANSI_RED"%c"ANSI_NORMAL, flags2char(field.expected));
                } else {
                    *cp++ = ' ';
                }
                cp += io.sprintf(cp, ANSI_GREEN"%c", '0' + field.piece_id);
                *cp++ = flags2char(flags);
                cp += io.sprintf(cp, ANSI_NORMAL);
                break;
            }
            }
        }
        *cp++ = '|';
        *cp++ = '\n';
    }
    cp += io.sprintf(cp, "---------------------\n");
    *cp = 0;
    io.puts(buffer);
}

func int32 board_check_fault(int32 xx, int32 yy, int32 expect) {
    Field f = board_get(xx, yy);
    switch (f.status) {
    case FIELD_FREE:
        if (f.expected && f.expected != expect) return 1;
        break;
    case FIELD_BLOCKED:
        return 1;
    case FIELD_TAKEN:
        if (f.flags != expect) return 1;
        break;
    }
    return 0;
}

// return 0=OK, 1=Not OK
func int32 board_try_option(const Option* pp, int32 x, int32 y) {
    for (uint32 i=0; i<4; i++) {
        Coor c = pp.parts[i];
        if (i != 0 && c.x == 0 && c.y == 0) return 0;    // ignore unused parts
        int32 xx = x + c.x;
        if (xx < 0 || xx > 4) return 1;
        int32 yy = y + c.y;
        if (yy < 0 || yy > 4) return 1;
        Field f = board_get(xx, yy);
        if (f.status != FIELD_FREE) return 1;
        if (f.expected != 0 && f.expected != c.flags) return 1;
        switch (c.flags) {
        case NORTH:
            if (yy == 4) return 1;
            if (board_check_fault(xx, yy+1, SOUTH)) return 1;
            break;
        case EAST:
            if (xx == 4) return 1;
            if (board_check_fault(xx+1, yy, WEST)) return 1;
            break;
        case SOUTH:
            if (yy == 0) return 1;
            if (board_check_fault(xx, yy-1, NORTH)) return 1;
            break;
        case WEST:
            if (xx == 0) return 1;
            if (board_check_fault(xx-1, yy, EAST)) return 1;
            break;
        case HEAD:
            if (board.haveHead) return 1;
            break;
        case TAIL:
            if (board.haveTail) return 1;
            break;
        }
    }
    return 0;
}

func void board_add(const Option* pp, int32 x, int32 y, uint8 id) {
    for (uint32 i=0; i<4; i++) {
        Coor c = pp.parts[i];
        if (i != 0 && c.x == 0 && c.y == 0) break;
        int32 xx = x + c.x;
        int32 yy = y + c.y;
        Field field = board_get(xx, yy);
        //assert(field.status == FIELD_FREE);
        field.status = FIELD_TAKEN;
        field.piece_id = id;
        field.flags = c.flags;
        board_set(xx, yy, field);
        switch (c.flags) {
        case NORTH:
            board_setExpected(xx, yy+1, SOUTH);
            break;
        case EAST:
            board_setExpected(xx+1, yy, WEST);
            break;
        case SOUTH:
            field.flags = NORTH;
            board_setExpected(xx, yy-1, NORTH);
            break;
        case WEST:
            board_setExpected(xx-1, yy, EAST);
            break;
        case HEAD:
            board.haveHead = 1;
            break;
        case TAIL:
            board.haveTail = 1;
            break;
        }
    }
}

func void board_rem(const Option* pp, int32 x, int32 y) {
    for (uint32 i=0; i<4; i++) {
        Coor c = pp.parts[i];
        if (i != 0 && c.x == 0 && c.y == 0) break;
        int32 xx = x + c.x;
        int32 yy = y + c.y;
        Field field = board_get(xx, yy);
        field.status = FIELD_FREE;
        field.piece_id = 0;
        field.flags = 0;
        board_set(xx, yy, field);
        switch (c.flags) {
        case NORTH:
            board_clearflags(xx, yy+1);
            break;
        case EAST:
            board_clearflags(xx+1, yy);
            break;
        case SOUTH:
            board_clearflags(xx, yy-1);
            break;
        case WEST:
            board_clearflags(xx-1, yy);
            break;
        case HEAD:
            board.haveHead = 0;
            break;
        case TAIL:
            board.haveTail = 0;
            break;
        }
    }
}

uint32 found;
uint64 tried;
func void board_try_piece(uint8 p) {
    if (p == NumPieces) {
        found++;
        io.printf("Found solution %u\n", found);
        board_print();
        return;
    }
    if (Setup[p].postype == PLACE_SETUP) {
        int32 o = Setup[p].option;
        int32 x = Setup[p].x;
        int32 y = Setup[p].y;
        if (board_try_option(&options[o][p], x, y)) {
            io.printf("invalid setup: piece %d, option %d at %d,%d\n", p, o, x, y);
            return;
            //exit(-1);
        }
        board_add(&options[o][p], x, y, p);
        board_try_piece(p+1);
    }
    for (int32 y=4; y>=0; y--) {
        for (int32 x=0; x<5; x++) {
            Field f = board_get(x, y);
            if (f.status != FIELD_FREE) continue;
            for (uint32 o=0; o<NumOptions; o++) {
                if (!board_try_option(&options[o][p], x, y)) {
                    board_add(&options[o][p], x, y, p);
                    board_try_piece(p+1);
                    board_rem(&options[o][p], x, y);
                }
                tried++;
                if (p==0) break;
            }
        }
    }
}

public func int32 main() {
    calculate_rotations();
    board_init();
    board_try_piece(0);
    io.printf("%luM tries, found %d solutions\n", tried/1000000, found);
    return 0;
}

