module complex_f_test;

func void aaa_board_print() {
    char[1024] buffer;
    memset(buffer, 0, sizeof(buffer));
    char* cp = buffer;
    cp += io.sprintf(cp, "Board: Head=%d  Tail=%d\n", aaa_board.haveHead, aaa_board.haveTail);
    for (int32 y=4; y>=0; y--) {
        cp += io.sprintf(cp, "---------------------\n");
        for (int32 x=0; x<5; x++) {
            *cp++ = '|';
            AaaField field = aaa_board.fields[x + y * 5];
            switch (field.status) {
            case FIELD_FREE:
                if (field.expected) {
                    cp += io.sprintf(cp, "\033[0;31m""%c""\033[0m", aaa_flags2char(field.expected));
                } else {
                    *cp++ = ' ';
                }
                *cp++ = ' ';
                *cp++ = ' ';
                break;
            case FIELD_BLOCKED:
                cp += io.sprintf(cp, "\033[01;30m""XXX""\033[0m");
                break;
            default:
            {
                int32 flags = field.flags;
                if (field.expected) {
                    cp += io.sprintf(cp, "\033[0;31m""%c""\033[0m", aaa_flags2char(field.expected));
                } else {
                    *cp++ = ' ';
                }
                cp += io.sprintf(cp, "\033[0;32m""%c", '0' + field.piece_id);
                *cp++ = aaa_flags2char(flags);
                cp += io.sprintf(cp, "\033[0m");
                break;
            }
            }
        }
        *cp++ = '|';
        *cp++ = '\n';
    }
    cp += io.sprintf(cp, "---------------------\n");
    *cp = 0;
    io.puts(buffer);
}

